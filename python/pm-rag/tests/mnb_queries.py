# O prefixo mnb_ refere-se a Marimo Notebook

import marimo

__generated_with = "0.17.2"
app = marimo.App(
    width="medium",
    app_title="Consultas por similaridade",
    auto_download=["ipynb"],
)


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Veja [Marimo](https://realpython.com/marimo-notebook/)""")
    return


@app.cell
def _(mo):
    mo.md(
        r"""
    # PM-RAG

    ## Detec√ß√£o de Anomalias (AD) em S√©ries Temporais Multivariadas (MTS)

    #### Keywords

    - AD - Anomaly Detection
    - MTS - Multivariate Time Series

    ## Objetivo

    - Ganhos de produtividade e vantagens competitivas em aplica√ß√µes industriais
    - Identificar mau funcionamento de equipamentos ou inefici√™ncias de processo
    - Identificar potenciais riscos de seguran√ßa
    - Implementa√ß√£o de manuten√ß√£o preditiva e preven√ß√£o de falhas dispendiosas
    - Em busca da Manufatura com Zero Defeitos (ZDM) e Manufatura com Zero Desperd√≠cio (ZWM)

    S√©ries Temporais Multivariadas (MTS) s√£o caracterizadas por complexas depend√™ncias temporais e intera√ß√µes entre vari√°veis. Ambientes industriais precisam de ferramentas robustas que implementem AD para MTS.

    AD para MTS √© um desafio de pesquisa cada vez mais cr√≠tico em aplica√ß√µes industriais. 
    M√©todos de aprendizado supervisionado s√£o caros.
    A alta dimensionalidade das MTS apresenta complexidades adicionais
    Problemas relacionados √† qualidade dos dados na Industria (Datasets desbalanceados com pouca informa√ß√£o para processos an√¥malos) 

    Para enfrentar esses desafios, v√°rias t√©cnicas de processamento de sinal e ML foram propostas. Embora as t√©cnicas de incorpora√ß√£o (Embedding) podem representar de dados MTS em um espa√ßo transformado existem outros modelos importantes.

    Modelos:

    - Transformadas Wavelet fornecem novas oportunidades para detec√ß√£o de anomalias mais robusta. Transformadas Wavelet Discretas (DWTs) fornecem uma ferramenta para analisar sinais n√£o estacion√°rios t√≠picos em ambientes industriais. Possuem capacidade de an√°lise multirresolu√ß√£o nas escalas de tempo e frequ√™ncias.
    - Os autoencoders (AEs) s√£o t√©cnicas poderosas para criar representa√ß√µes vetoriais de MTS. Quando combinados com a DWT, √© poss√≠vel aproveitar tanto as propriedades de decomposi√ß√£o em escala temporal da DWT quanto as capacidades de redu√ß√£o de dimensionalidade dos AEs. Essa abordagem h√≠brida permite uma captura mais eficaz de padr√µes complexos e anomalias em s√©ries temporais (TS) industriais.
    - Juntamente com os AEs, v√°rios algoritmos de aprendizado de m√°quina (ML) que capturam a depend√™ncia temporal s√£o comumente usados para detec√ß√£o de anomalias (GRU, LSTM, CNN unidimensional).
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    **Diagrama de componentes**

    Veja arquivo em `docs/img/pm-rag-01.svg`
    """
    )
    return


@app.cell
def _():
    from pm_rag.util import DB_CONFIG, exec_os_command, exec_query, test_similarity_search
    return DB_CONFIG, exec_os_command, exec_query, test_similarity_search


@app.cell
def _():
    import sys
    from pathlib import Path
    import time
    import psycopg
    from pgvector.psycopg import register_vector
    from sqlalchemy import create_engine, text
    import numpy as np
    import pandas as pd

    import marimo as mo

    # Adiciona o diret√≥rio ao path para importar o m√≥dulo run_sql
    sys.path.insert(0, str(Path(__file__).parent))
    return mo, pd


@app.cell
def _(pd):
    pd.set_option('display.max_columns', None)  # para mostrar um n√∫mero ilimitado de colunas
    pd.set_option('display.max_rows', None)  # para mostrar todas as linhas
    pd.set_option('display.width', 2000)  # Configura a largura da tela para um valor arbitrariamente grande
    return


@app.cell
def _():
    # DB_CONFIG √© importado de util.py
    return


@app.cell
def _(DB_CONFIG, exec_os_command):
    # Verificar se PostgreSQL est√° rodando
    command = ["pg_isready", "-h", str(DB_CONFIG['host']), "-p", str(DB_CONFIG['port'])]
    std_out, stderr = exec_os_command(command)
    print(f"{std_out}{stderr}")
    return


@app.cell
def _(DB_CONFIG):
    print(f"Conectando ao Postgres em {DB_CONFIG['host']}")
    from pm_rag.util import (
        get_connection_string,
        get_sqlalchemy_connection_string,
        create_psycopg_connection,
        create_sqlalchemy_engine,
    )

    print(f"sqlalchemy_connection_string = {get_sqlalchemy_connection_string()}")
    return


@app.cell
def _(exec_query):
    df1 = exec_query("get_maintenance_text")
    print(df1)
    return


@app.cell
def _(exec_query):
    df2 = exec_query("get_distinct_order_type")
    print(df2)
    return


@app.cell
def _(exec_query):
    df3 = exec_query("equipment_maintainance_priority")
    print(df3)
    return


@app.cell
def _(test_similarity_search):
    test_similarity_search()
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ### Considere a query abaixo onde a tabela `sap_pm_rag_data`  possui os dados de manuten√ß√£o de uma usina de gera√ß√£o de energia el√©trica obtidos do SAP-PM.

    ```sql
    SELECT sap_order_id, equipment_number, order_type,
           LEFT(maintenance_text, 120) as preview,
           embedding <=> %s::vector as distance  -- ‚≠ê OPERADOR CHAVE. %s resolve para o vetor de entrada
    FROM sap_pm_rag_data
    ORDER BY distance  -- Ordena do mais similar (menor dist√¢ncia)
    LIMIT 5;           -- Retorna apenas os top 5
    ```

    #### O que faz:

    Este √© um comando de **busca por similaridade vetorial** (Semantic Search / RAG) que encontra as **5 ordens de manuten√ß√£o mais similares** a um dado vetor de consulta.


    #### üîç Operador `<=>`

    O operador `<=>` √© o **operador de dist√¢ncia de cosseno** do pgvector:

    - **Entrada**: `%s::vector` ‚Üí vetor de consulta (embedding de 512 dimens√µes)
    - **C√°lculo**: Dist√¢ncia de cosseno entre cada `embedding` da tabela e o vetor de consulta
    - **Sa√≠da**: Valor entre `0` e `2`
      - `0` = vetores id√™nticos (100% similar)
      - `1` = vetores ortogonais (sem similaridade)
      - `2` = vetores opostos

    **Quanto MENOR a dist√¢ncia, MAIOR a similaridade sem√¢ntica.**

    ---

    #### üéØ Objetivo no Contexto SAP-PM

    ##### Cen√°rio de uso pr√°tico:

    **1. Usu√°rio faz uma pergunta:**
    > "Como resolver vibra√ß√£o alta no mancal da turbina?"

    **2. Sistema converte a pergunta em embedding (512 dimens√µes)**

    ```python
    query_embedding = model.embed("Como resolver vibra√ß√£o alta no mancal da turbina?")
    # Resultado: [0.234, -0.123, 0.567, ..., 0.089]  # 512 valores
    ```

    **3. Query SQL busca ordens similares:**

    ```sql
    -- Substitui %s pelo query_embedding
    embedding <=> '[0.234, -0.123, 0.567, ...]'::vector
    ```

    **4. Resultado esperado (top 5):**
    ```
    | sap_order_id | equipment_number | order_type | preview                                      | distance |
    |--------------|------------------|------------|----------------------------------------------|----------|
    | 40001001     | T-01-A          | PM01       | Aumento de vibra√ß√£o detectado no mancal 3B... | 0.0234   |
    | 70005005     | B-01-A          | PM01       | Relat√≥rio de An√°lise - Bomba com vibra√ß√£o... | 0.0456   |
    | 40010010     | TR-FAN-04       | PM01       | Ru√≠do excessivo no ventilador. Desbalancea...| 0.0678   |
    | 40015015     | M-01-A          | PM01       | Alto consumo de pot√™ncia. Vibra√ß√£o com freq...| 0.0891   |
    | 40011011     | TG-02-A         | PM01       | Falha na partida da turbina a g√°s...        | 0.1023   |
    ```

    ---

    ## üí° Casos de Uso na Usina

    ### 1. **Diagn√≥stico Assistido por IA**
    - T√©cnico: "Mostre as ordens de manuten√ß√£o t√≠picas para: Temperatura alta no transformador"
    - Sistema: Retorna ordens similares ‚Üí `50007007` (DGA - **Dissolved Gas Analysis** em transformador) ...

    ### 2. **Busca de Solu√ß√µes Hist√≥ricas**
    - Pergunta: "O que tem no database sobre: Vazamento no selo da bomba"
    - Sistema: Encontra `40016016` (falha repetitiva em selo por cavita√ß√£o)

    ### 3. **An√°lise de Causa-Raiz**
    - Query: "Qual a causa-raiz para: Queda s√∫bita de press√£o"
    - Sistema: Retorna `40003003` (vazamento na caldeira), `40013013` (selo do reator)

    ### 4. **Recomenda√ß√£o de Procedimentos**
    - Input: "Procedimento de partida da turbina"
    - Sistema: Retorna `60019019` (Documento PR-OP-01 completo)

    ### 5. **Correla√ß√£o de Falhas**
    - **Query embedding de s√©rie temporal anormal**
    - Sistema: Encontra ordens com padr√µes similares de vibra√ß√£o/temperatura

    ---

    #### üîß Por que usar Embeddings?

    **Busca tradicional (SQL LIKE):**
    ```sql
    WHERE maintenance_text LIKE '%vibra√ß√£o%'  -- S√≥ encontra palavra exata
    ```
    ‚ùå N√£o encontra: "oscila√ß√£o", "desbalanceamento", "RMS alto"

    **Busca sem√¢ntica (Embeddings):**
    ```sql
    WHERE embedding <=> query_vector  -- Entende significado
    ```
    ‚úÖ Encontra: "vibra√ß√£o", "ru√≠do", "desbalanceamento", "pico RMS"

    ---

    #### üìà Benef√≠cios no SAP-PM

    1. **RAG (Retrieval-Augmented Generation)**: LLM usa ordens similares como contexto
    2. **Manuten√ß√£o Preditiva**: Correlaciona falhas antes de acontecerem
    3. **Knowledge Base Inteligente**: 20+ anos de hist√≥rico SAP acess√≠vel semanticamente
    4. **Redu√ß√£o de Downtime**: T√©cnico encontra solu√ß√£o em segundos vs. horas

    ---

    #### üéØ Resumo

    Este comando √© o **cora√ß√£o de um sistema RAG** para manuten√ß√£o industrial, permitindo buscar conhecimento hist√≥rico do SAP-PM por **significado**, n√£o apenas por palavras-chave exatas.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
    ## üîç Query Embedding de S√©rie Temporal Anormal - Detalhamento

    ### üìä O Conceito

    Uma **s√©rie temporal anormal** √© um padr√£o de dados de sensores que se desvia do comportamento normal, indicando potencial falha. Em vez de buscar por palavras-chave, voc√™ converte esse padr√£o anormal em um embedding e busca ordens de manuten√ß√£o com padr√µes similares.

    ---

    ## üéØ Como Funciona na Pr√°tica

    ### **Cen√°rio Real:**

    Voc√™ est√° monitorando a **Bomba B-25-C** em tempo real:

    ```
    Tag: V-B25C (Vibra√ß√£o)
    Comportamento Normal: 0.5-1.2 mm/s RMS (est√°vel)
    Comportamento Atual: 
      - Hora 0: 1.5 mm/s
      - Hora 2: 2.3 mm/s
      - Hora 4: 3.8 mm/s
      - Hora 6: 5.2 mm/s  ‚ö†Ô∏è ANORMAL!
    ```

    ---

    ## üîÑ Fluxo Completo do Processo

    ### **Etapa 1: Detec√ß√£o da Anomalia**

    ```python
    # Sistema de monitoramento detecta padr√£o anormal
    def detectar_anomalia(tag: str, janela_tempo: int = 24):
        \"""
        Detecta anomalias em s√©ries temporais usando t√©cnicas como:
        - Z-score (desvio padr√£o)
        - Isolation Forest
        - LSTM Autoencoder
        \"""
        dados = buscar_dados_sensor(tag, janela_tempo)

        # Exemplo: Detec√ß√£o simples por threshold
        media = np.mean(dados['valor'])
        std = np.std(dados['valor'])
        z_score = (dados['valor'][-1] - media) / std

        if z_score > 3:  # 3 desvios padr√£o
            return {
                'anomalia': True,
                'tag': tag,
                'tipo': classificar_anomalia(dados),
                'serie_temporal': dados
            }

        return {'anomalia': False}

    # Resultado da detec√ß√£o
    anomalia = {
        'anomalia': True,
        'tag': 'V-B25C',
        'tipo': 'aumento_progressivo',  # Padr√£o identificado
        'serie_temporal': {
            'valores': [1.5, 2.3, 3.8, 5.2],
            'timestamps': ['2024-10-28 00:00', '02:00', '04:00', '06:00'],
            'taxa_crescimento': 0.62  # mm/s por hora
        }
    }
    ```

    ---

    ### **Etapa 2: Converter S√©rie Temporal em Texto Descritivo**

    O embedding funciona melhor com texto rico em contexto sem√¢ntico:

    ```python
    def serie_temporal_para_texto(anomalia: dict) -> str:
        \"""
        Converte a s√©rie temporal anormal em descri√ß√£o textual
        \"""
        dados = anomalia['serie_temporal']

        # Gera descri√ß√£o rica em contexto
        texto = f\"""
        An√°lise de anomalia detectada no sensor {anomalia['tag']}:

        Padr√£o observado: {anomalia['tipo']}

        S√©rie temporal:
        - Valor inicial: {dados['valores'][0]} mm/s RMS
        - Valor final: {dados['valores'][-1]} mm/s RMS
        - Taxa de crescimento: {dados['taxa_crescimento']} mm/s por hora
        - Dura√ß√£o: {len(dados['valores'])} horas

        Caracter√≠sticas:
        - Aumento progressivo e cont√≠nuo da vibra√ß√£o
        - Padr√£o lento de deteriora√ß√£o
        - Sem oscila√ß√µes bruscas
        - Curva de crescimento aproximadamente linear

        Contexto do equipamento:
        - Tag: V-B25C (Sensor de vibra√ß√£o)
        - Equipamento: Bomba de alimenta√ß√£o
        - Threshold de alarme: 4.0 mm/s RMS
        - Status: ALERTA - Valor acima do threshold

        Comportamento similar a falhas de:
        - Desalinhamento de eixo
        - Desgaste de rolamento
        - Desbalanceamento mec√¢nico
        \"""

        return texto.strip()
    ```

    **Resultado:**
    ```
    "An√°lise de anomalia detectada no sensor V-B25C: Padr√£o observado: aumento_progressivo
    S√©rie temporal: Valor inicial: 1.5 mm/s RMS, Valor final: 5.2 mm/s RMS
    Taxa de crescimento: 0.62 mm/s por hora, Dura√ß√£o: 4 horas
    Caracter√≠sticas: Aumento progressivo e cont√≠nuo da vibra√ß√£o, Padr√£o lento de deteriora√ß√£o..."
    ```

    ---

    ### **Etapa 3: Gerar Embedding da Descri√ß√£o**

    ```python
    def gerar_embedding_anomalia(texto_descritivo: str) -> list[float]:
        \"""
        Gera embedding da descri√ß√£o da s√©rie temporal anormal
        \"""
        # Usando OpenAI (exemplo)
        import openai

        response = openai.Embedding.create(
            input=texto_descritivo,
            model="text-embedding-ada-002"
        )

        return response['data'][0]['embedding']  # 512 ou 1536 dimens√µes

    # Gera o embedding
    query_embedding = gerar_embedding_anomalia(serie_temporal_para_texto(anomalia))
    # Resultado: [0.234, -0.123, 0.567, ..., 0.089]  (512 valores)
    ```

    ---

    ### **Etapa 4: Buscar Ordens Similares no PostgreSQL**

    ```sql
    -- Busca ordens de manuten√ß√£o com padr√µes similares de vibra√ß√£o
    SELECT 
        sap_order_id,
        equipment_number,
        functional_location,
        order_type,
        creation_date,
        LEFT(maintenance_text, 300) AS preview,
        embedding <=> %s::vector AS distance,
        CASE 
            WHEN maintenance_text ILIKE '%vibra%' THEN 'VIBRA√á√ÉO'
            WHEN maintenance_text ILIKE '%rolamento%' THEN 'ROLAMENTO'
            WHEN maintenance_text ILIKE '%desalinhamento%' THEN 'DESALINHAMENTO'
        END AS tipo_falha_identificado
    FROM 
        sap_pm_rag_data
    WHERE 
        -- Filtros adicionais para refinar
        (maintenance_text ILIKE '%vibra%' 
         OR maintenance_text ILIKE '%aumento progressivo%'
         OR maintenance_text ILIKE '%mm/s%')
        AND embedding <=> %s::vector < 0.4  -- Threshold de similaridade
    ORDER BY 
        distance ASC
    LIMIT 10;
    ```

    ---

    ### **Etapa 5: Resultado da Busca**

    ```python
    # Executando a query
    resultados = executar_busca_similaridade(query_embedding)

    # Exemplo de resultado
    \"""
    | ordem_id  | equipamento | preview                                              | distance | tipo_falha      |
    |-----------|-------------|------------------------------------------------------|----------|-----------------|
    | 70005005  | B-01-A      | Relat√≥rio: vibra√ß√£o indica aumento progressivo...    | 0.0234   | VIBRA√á√ÉO        |
    |           |             | espectro de 2X RPM nas √∫ltimas 800 horas...         |          | ROLAMENTO       |
    |-----------|-------------|------------------------------------------------------|----------|-----------------|
    | 40001001  | T-01-A      | Aumento de vibra√ß√£o detectado no mancal 3B...        | 0.0456   | VIBRA√á√ÉO        |
    |           |             | pico de 12 mm/s, desalinhamento do eixo...          |          | DESALINHAMENTO  |
    |-----------|-------------|------------------------------------------------------|----------|-----------------|
    | 40010010  | TR-FAN-04   | Ru√≠do excessivo... vibra√ß√£o estava 5x o limite...    | 0.0678   | VIBRA√á√ÉO        |
    \"""
    ```

    ---

    ## üéØ An√°lise dos Resultados

    ### **Ordem 70005005 (Mais Similar - 0.0234)**

    Do dataset fornecido:

    ```
    BOMBA_ALIMENTACAO_01 | PM01 | Relat√≥rio de An√°lise de Vida √ötil - Bomba B-01-A
    "As an√°lises de vibra√ß√£o (tag: V-B01A) indicam um aumento progressivo e lento 
    do espectro de 2X RPM nas √∫ltimas 800 horas de opera√ß√£o. Este padr√£o de s√©rie 
    temporal lenta √© caracter√≠stico de desalinhamento ou desgaste de rolamentos..."

    Detalhes da Falha de Rolamento: "O aumento da temperatura (tag: T-B01A-ROL) 
    foi o primeiro indicador, subindo de 45 para 65 em 10 dias..."
    ```

    **O que o sistema identifica:**
    - ‚úÖ Padr√£o similar: "aumento progressivo e lento"
    - ‚úÖ Tipo de falha: Rolamento desgastado
    - ‚úÖ Solu√ß√£o hist√≥rica: Troca de rolamentos SKF 6210 C3
    - ‚úÖ Correla√ß√£o: Vibra√ß√£o + Temperatura
    - ‚úÖ Tempo de deteriora√ß√£o: 800 horas (similar ao padr√£o atual)

    ---

    ## üí° Sistema Completo em Produ√ß√£o

    ```python
    class SistemaRAGSerieTemporalAnormal:
        \"""
        Sistema completo de detec√ß√£o e correla√ß√£o de anomalias
        \"""

        def __init__(self):
            self.detector_anomalias = DetectorAnomalias()
            self.gerador_embeddings = GeradorEmbeddings()
            self.db = PostgreSQLConnection()

        def monitorar_e_diagnosticar(self, tag: str):
            \"""
            Pipeline completo: Monitoramento ‚Üí Detec√ß√£o ‚Üí RAG ‚Üí Diagn√≥stico
            \"""
            # 1. Detecta anomalia na s√©rie temporal
            anomalia = self.detector_anomalias.detectar(tag)

            if not anomalia['anomalia']:
                return {"status": "normal"}

            # 2. Converte s√©rie temporal em texto descritivo
            texto_descritivo = self.serie_temporal_para_texto(anomalia)

            # 3. Gera embedding
            query_embedding = self.gerador_embeddings.gerar(texto_descritivo)

            # 4. Busca ordens similares
            ordens_similares = self.buscar_ordens_similares(query_embedding)

            # 5. Envia para LLM para diagn√≥stico
            diagnostico = self.gerar_diagnostico_llm(
                anomalia=anomalia,
                ordens_similares=ordens_similares
            )

            return {
                "status": "anomalia_detectada",
                "tag": tag,
                "anomalia": anomalia,
                "ordens_similares": ordens_similares,
                "diagnostico": diagnostico,
                "acoes_recomendadas": diagnostico['acoes']
            }

        def gerar_diagnostico_llm(self, anomalia, ordens_similares):
            \"""
            Usa LLM (GPT-4, Claude, etc) para gerar diagn√≥stico
            \"""
            contexto = "\n\n".join([
                f"Ordem {o['sap_order_id']} - {o['equipment_number']}:\n{o['maintenance_text']}"
                for o in ordens_similares
            ])

            prompt = f\"""
            Voc√™ √© um especialista em manuten√ß√£o de usinas de energia.

            SITUA√á√ÉO ATUAL:
            {self.serie_temporal_para_texto(anomalia)}

            HIST√ìRICO DE CASOS SIMILARES:
            {contexto}

            Com base no hist√≥rico, forne√ßa:
            1. Diagn√≥stico prov√°vel da causa raiz
            2. Tempo estimado at√© falha cr√≠tica
            3. A√ß√µes corretivas recomendadas (prioridade)
            4. Pe√ßas de reposi√ß√£o necess√°rias
            5. Janela de manuten√ß√£o sugerida

            Formato da resposta: JSON
            \"""

            resposta = self.llm.generate(prompt)
            return json.loads(resposta)

    # Uso em produ√ß√£o
    sistema = SistemaRAGSerieTemporalAnormal()
    resultado = sistema.monitorar_e_diagnosticar('V-B25C')

    print(resultado['diagnostico'])
    \"""
    {
        "causa_raiz": "Desgaste de rolamento SKF 6210 C3",
        "tempo_ate_falha": "48-72 horas",
        "prioridade": "ALTA",
        "acoes_recomendadas": [
            "1. Parada programada em 24h",
            "2. Substituir rolamentos",
            "3. Verificar alinhamento do eixo",
            "4. Inspecionar base por recalque"
        ],
        "pecas_necessarias": ["SKF 6210 C3 (2 unidades)", "Acoplamento H-201"],
        "custo_estimado": "R$ 15.000",
        "downtime_estimado": "8 horas"
    }
    \"""
    ```

    ---

    ## üìä Tipos de Padr√µes Detect√°veis

    ### **1. Aumento Progressivo (Drift)**
    ```
    Padr√£o: ‚ÜóÔ∏è ‚ÜóÔ∏è ‚ÜóÔ∏è (lento e cont√≠nuo)
    Exemplo: Vibra√ß√£o aumentando 0.5 mm/s por dia
    Causa t√≠pica: Desgaste de rolamento, desalinhamento
    Match no dataset: Ordem 70005005 (Bomba B-01-A)
    ```

    ### **2. Oscila√ß√£o Violenta**
    ```
    Padr√£o: ‚Üë‚Üì‚Üë‚Üì‚Üë‚Üì (alta frequ√™ncia)
    Exemplo: Press√£o variando ¬±10% a cada 2 segundos
    Causa t√≠pica: Cavita√ß√£o, resson√¢ncia
    Match no dataset: Ordem 40016016 (Bomba B-22-A - cavita√ß√£o)
    ```

    ### **3. Queda Brusca (Step Change)**
    ```
    Padr√£o: ‚îÅ‚îÅ‚îÅ‚îÅ‚ï≤______ (s√∫bito)
    Exemplo: Press√£o cai 30% em 5 segundos
    Causa t√≠pica: Vazamento, ruptura
    Match no dataset: Ordem 40003003 (Caldeira - vazamento)
    ```

    ### **4. Flatline (Falha de Instrumento)**
    ```
    Padr√£o: ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ (constante anormal)
    Exemplo: Temperatura presa em 4.00 mA
    Causa t√≠pica: Falha de sensor
    Match no dataset: Ordem 40017017 (Transmissor T-HT-05)
    ```

    ### **5. Ru√≠do Aleat√≥rio (Noise)**
    ```
    Padr√£o: ‚àø‚àø‚àø‚àø‚àø‚àø (err√°tico)
    Exemplo: Leitura com ru√≠do branco
    Causa t√≠pica: Interfer√™ncia eletr√¥nica, falha de cabo
    Match no dataset: Ordem SISTEMA_VIBRACAO (V-MTR-05)
    ```

    ---

    ## üöÄ Vantagens do Approach

    ### **1. Detec√ß√£o Precoce**
    - Identifica falhas antes da quebra
    - Tempo: 48-72h de anteced√™ncia (vs 0h na quebra)

    ### **2. Diagn√≥stico Preciso**
    - Correlaciona padr√£o atual com hist√≥rico de 20+ anos
    - Acur√°cia: ~85-90% (vs 60% diagn√≥stico manual)

    ### **3. Manuten√ß√£o Preditiva**
    - Converte PM01 (corretiva) em PM03 (preventiva)
    - Redu√ß√£o de custos: 40-60%

    ### **4. Transfer√™ncia de Conhecimento**
    - Captura expertise de t√©cnicos experientes
    - Democratiza conhecimento para equipe j√∫nior

    ---

    ## üéØ Resultado Final para o Operador

    ```
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ  üö® ALERTA PREDITIVO - BOMBA B-25-C                        ‚îÇ
    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    ‚îÇ  Tag: V-B25C                                                ‚îÇ
    ‚îÇ  Vibra√ß√£o: 5.2 mm/s RMS (‚Üë de 1.5 em 6h)                  ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  üìä DIAGN√ìSTICO (85% confian√ßa):                           ‚îÇ
    ‚îÇ     Desgaste de rolamento - padr√£o id√™ntico √† OM 70005005  ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  ‚è±Ô∏è  TEMPO AT√â FALHA: 48-72 horas                          ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  ‚úÖ A√á√ïES RECOMENDADAS:                                    ‚îÇ
    ‚îÇ     1. Programar parada em 24h                             ‚îÇ
    ‚îÇ     2. Pe√ßas: SKF 6210 C3 (2x) - Estoque: ‚úì               ‚îÇ
    ‚îÇ     3. T√©cnico: Jo√£o Silva (8h expertise)                  ‚îÇ
    ‚îÇ     4. Downtime estimado: 8 horas                          ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ  üí∞ ECONOMIA: R$ 45.000 (vs quebra n√£o planejada)         ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    ```

    ### **Isso √© RAG com s√©ries temporais anormais!** üéØ
    """
    )
    return


@app.cell
def _(mo):
    mo.md(r"""Veja [Refer√™ncias Aqui](http://localhost:2718/?file=tests%2Fmnb_surveys.py)""")
    return


if __name__ == "__main__":
    app.run()
